package smartboardgui;

import WSClient.sessions.Sessions;
import WSClient.sessions.SessionsService;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.json.me.JSONException;
import org.json.me.JSONObject;

/**
 *
 * WARNIG WARNING ZOMBIE CODE AHEAD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
public class TabView extends javax.swing.JPanel {

    private ArrayList<String> alSessions;
    private ArrayList<String> alKeyFrames;
    private ArrayList<String> alImages;
    private int currentJob;
    private int _userID;
    private String currentID;
    private int kfSelected;
    private int seSelected;
    private int imSelected;
    private int tabType;
    private int _tabtype;
    private Sessions wsSession;
    private Process java;

    private void initContainers() {
        alSessions = new ArrayList<String>();
        alKeyFrames = new ArrayList<String>();
        alImages = new ArrayList<String>();
    }

    public void getSessions(int userID, int tabType) throws JSONException {
        try {
            this._userID = userID;
            _tabtype = tabType;
            wsSession = new SessionsService().getSessionsPort();
            //  ((BindingProvider) wsSession).getRequestContext().put(BindingProviderProperties.CONNECT_TIMEOUT, 1000); //Kill me pls

            alSessions.clear();
            alKeyFrames.clear();
            alImages.clear();
            List<Object> recived = null;
            if (tabType == 0) {
                recived = wsSession.getSessions(Integer.valueOf(userID));
            }
            if (tabType == 1) {
                recived = wsSession.getFriendsSessions(String.valueOf(userID));
            }
            if (tabType == 2) {
                recived = wsSession.getOtherSessions(String.valueOf(userID));
                bDeleteFrame.setVisible(false);
                bComment.setVisible(false);
            }


            for (Object obj : recived) {
                alSessions.add(String.valueOf(obj));
            }
            DefaultListModel model = new DefaultListModel();
            for (String jsonString : alSessions) {
                JSONObject json = new JSONObject(jsonString);
                model.addElement(json.get("name"));
            }
            listSessions.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void getCaptureImages(String keyFrameID) {
        try {
            kfSelected = listKeyFrames.getSelectedIndex();
            JSONObject jsonKF = new JSONObject(alKeyFrames.get(kfSelected));
            currentID = jsonKF.getString("id");
            if (currentID != null || !currentID.equals("")) {
                alImages.clear();

                List<Object> ci = wsSession.getCapturedImages(currentID);
                for (Object obj : ci) {
                    alImages.add(String.valueOf(obj));
                }
                refreshImages();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public TabView() {
        initContainers();
        initComponents();
        cImage.setVisible(true);
        cImage.setDoubleBuffered(true);
        bPlay.setEnabled(false);
        bStop.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lislImages = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSessions = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        listKeyFrames = new javax.swing.JList();
        bPlay = new javax.swing.JButton();
        bStop = new javax.swing.JButton();
        bComment = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tpComment = new javax.swing.JTextPane();
        bDeleteFrame = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cImage = new org.jdesktop.swingx.JXImagePanel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(smartboardgui.SmartBoardGUIApp.class).getContext().getResourceMap(TabView.class);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        lislImages.setName("lislImages"); // NOI18N
        lislImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lislImagesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lislImages);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        listSessions.setName("listSessions"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listSessions, org.jdesktop.beansbinding.ELProperty.create("getKeyFrames"), listSessions, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        listSessions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSessionsMouseClicked(evt);
            }
        });
        listSessions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSessionsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listSessions);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        listKeyFrames.setName("listKeyFrames"); // NOI18N
        listKeyFrames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listKeyFramesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listKeyFrames);

        bPlay.setText(resourceMap.getString("bPlay.text")); // NOI18N
        bPlay.setName("bPlay"); // NOI18N
        bPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bPlayMouseClicked(evt);
            }
        });

        bStop.setText(resourceMap.getString("bStop.text")); // NOI18N
        bStop.setName("bStop"); // NOI18N
        bStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bStopMouseClicked(evt);
            }
        });

        bComment.setText(resourceMap.getString("bComment.text")); // NOI18N
        bComment.setName("bComment"); // NOI18N
        bComment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCommentMouseClicked(evt);
            }
        });

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        tpComment.setName("tpComment"); // NOI18N
        jScrollPane4.setViewportView(tpComment);

        bDeleteFrame.setText(resourceMap.getString("bDeleteFrame.text")); // NOI18N
        bDeleteFrame.setName("bDeleteFrame"); // NOI18N
        bDeleteFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bDeleteFrameMouseClicked(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        cImage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        cImage.setName("cImage"); // NOI18N

        javax.swing.GroupLayout cImageLayout = new javax.swing.GroupLayout(cImage);
        cImage.setLayout(cImageLayout);
        cImageLayout.setHorizontalGroup(
            cImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );
        cImageLayout.setVerticalGroup(
            cImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(79, 79, 79)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bStop, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(292, 292, 292))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bComment, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                                .addComponent(bDeleteFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, jScrollPane3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bComment, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(bDeleteFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bStop, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(bPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void listSessionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSessionsMouseClicked
        try {
            seSelected = listSessions.getSelectedIndex();
            currentID = new JSONObject(alSessions.get(seSelected)).getString("id");
            if (currentID != null || !currentID.equals("")) {
                alKeyFrames.clear();
                alImages.clear();
                cImage.updateUI();
                lislImages.setModel(new DefaultListModel());
                listKeyFrames.setModel(new DefaultListModel());

                List<Object> kf = wsSession.getKeyFrames(currentID);
                for (Object obj : kf) {
                    alKeyFrames.add(String.valueOf(obj));
                }
                refreshKeyFrames();
                currentJob = 0;
                bPlay.setEnabled(true);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_listSessionsMouseClicked

    private void listSessionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSessionsValueChanged
    }//GEN-LAST:event_listSessionsValueChanged

    private void listKeyFramesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listKeyFramesMouseClicked
        if (alKeyFrames.size() > 0) {
            try {
                kfSelected = listKeyFrames.getSelectedIndex();
                alImages.clear();
                lislImages.setModel(new DefaultListModel());
                JSONObject json = new JSONObject(alKeyFrames.get(kfSelected));
                currentID = json.getString("id");
                String kf = json.getString("kf");
                if (!kf.equals("")) {
                    try {
                        BufferedImage buffImage = Base64Conversion.base64ToImage(kf);
                        Graphics2D graph = (Graphics2D) cImage.getGraphics();
                        cImage.getGraphics().clearRect(0, 0, cImage.getWidth(), cImage.getHeight());
                        Image scaled = buffImage.getScaledInstance(cImage.getWidth(), cImage.getHeight(), Image.SCALE_SMOOTH);
                        //  cImage.getGraphics().drawImage(scaled, 0, 0, null);
                        cImage.setImage(scaled);
                        getCaptureImages(kf);
                        tpComment.setText(json.getString("comment"));
                        currentJob = 1;
                    } catch (IOException ex) {
                        Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (JSONException ex) {
                Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_listKeyFramesMouseClicked

    private void cImageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_cImageComponentShown
    }//GEN-LAST:event_cImageComponentShown

    private void lislImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lislImagesMouseClicked
        if (alImages.size() > 0) {
            try {
                imSelected = lislImages.getSelectedIndex();
                JSONObject json = new JSONObject(alImages.get(imSelected));
                currentID = json.getString("id");
                String image = json.getString("ci");
                try {
                    BufferedImage buffImage = Base64Conversion.base64ToImage(image);
                    cImage.getGraphics().clearRect(0, 0, cImage.getWidth(), cImage.getHeight());
                    Image scaled = buffImage.getScaledInstance(cImage.getWidth(), cImage.getHeight(), Image.SCALE_SMOOTH);
                    //  cImage.getGraphics().drawImage(scaled, 0, 0, null);
                    cImage.setImage(scaled);
                    if (json.has("comment")) {
                        tpComment.setText(json.getString("comment"));
                    } else {
                        tpComment.setText("");
                    }
                    currentJob = 2;
                } catch (IOException ex) {
                    Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (JSONException ex) {
                Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lislImagesMouseClicked

    private void refreshKeyFrames() {
        DefaultListModel model = new DefaultListModel();
        for (String jsonString : alKeyFrames) {
            try {
                JSONObject json = new JSONObject(jsonString);
                String toAdd = json.getString("id") + " ";
                if (json.has("comment")) {
                    String comment = json.getString("comment");
                    if (comment.length() > 16) {
                        toAdd += comment.substring(0, 13) + "...";
                    } else {
                        toAdd += comment;
                    }
                }
                model.addElement(toAdd);
            } catch (JSONException ex) {
                Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
            }
            listKeyFrames.setModel(model);
        }
    }

    public void refreshImages() {
        try {
            DefaultListModel model = new DefaultListModel();
            for (String jsonString : alImages) {
                JSONObject json = new JSONObject(jsonString);
                String toAdd = json.getString("id") + " ";
                if (json.has("comment")) {
                    String comment = json.getString("comment");
                    if (comment.length() > 13) {
                        toAdd += comment.substring(0, 16) + "...";
                    } else {
                        toAdd += comment;
                    }
                }
                model.addElement(toAdd);
            }
            lislImages.setModel(model);
        } catch (JSONException ex) {
            Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void bCommentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCommentMouseClicked

        switch (currentJob) {
            case (1): {
                if (true) {
                    try {
                        String newComment = tpComment.getText();
                        wsSession.addKeyFrameComment(currentID, newComment);
                        JSONObject json = new JSONObject(alKeyFrames.get(kfSelected));
                        json.put("comment", newComment);
                        alKeyFrames.set(kfSelected, json.toString());
                        refreshKeyFrames();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
            case (2): {
                if (true) {
                    try {
                        String newComment = tpComment.getText();
                        wsSession.addCapturedImageComment(currentID, newComment);
                        JSONObject json = new JSONObject(alImages.get(imSelected));
                        json.put("comment", newComment);
                        alImages.set(imSelected, json.toString());
                        refreshImages();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_bCommentMouseClicked

    private void bDeleteFrameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bDeleteFrameMouseClicked
        switch (currentJob) {
            case (1): {
                if (true) {
                    try {
                        int result = JOptionPane.showConfirmDialog(this.getParent(), "Are you sure you want to delete this key frame?", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (result == JOptionPane.OK_OPTION) {
                            wsSession.deleteKeyFrame(Integer.valueOf(currentID));
                            alKeyFrames.remove(kfSelected);
                            refreshKeyFrames();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
            case (2): {
                if (true) {
                    try {
                        int result = JOptionPane.showConfirmDialog(this.getParent(), "Are you sure you want to delete this image?", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (result == JOptionPane.OK_OPTION) {
                            wsSession.deleteCapturedImage(currentID);
                            alImages.remove(imSelected);
                            refreshImages();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Could not connect to remote web server.", "Connection error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_bDeleteFrameMouseClicked

    private void disableAll() {
        bComment.setEnabled(false);
        bDeleteFrame.setEnabled(false);
        bPlay.setEnabled(false);
        lislImages.setEnabled(false);
        listKeyFrames.setEnabled(false);
        listSessions.setEnabled(false);
        tpComment.setEnabled(false);
        this.getParent().setEnabled(false);
        bStop.setEnabled(true);
    }

    private void enableAll() {
        bComment.setEnabled(true);
        bDeleteFrame.setEnabled(true);
        bPlay.setEnabled(false);
        lislImages.setEnabled(true);
        listKeyFrames.setEnabled(true);
        listSessions.setEnabled(true);
        tpComment.setEnabled(true);
        this.getParent().setEnabled(true);
        bStop.setEnabled(false);
    }

    private boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }


        return dir.delete();
    }

    private void bPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPlayMouseClicked
        if (alSessions.size() > 0) {
            File temp = new File("temp");
            try {
                temp.mkdir();
                String sessID = new JSONObject(alSessions.get(seSelected)).getString("id");
                String tempMain = "temp/" + sessID;
                new File(tempMain).mkdir();
                disableAll();
                for (int i = 0; i < alKeyFrames.size(); i++) {

                    JSONObject json = new JSONObject(alKeyFrames.get(i));
                    String id = json.getString("id");
                    ArrayList<Object> tempList = (ArrayList<Object>) wsSession.getCapturedImages(id);
                    String kfPath = tempMain + "/" + id + "/images";
                    new File(kfPath).mkdirs();
                    try {
                        ImageIO.write(Base64Conversion.base64ToImage(json.getString("kf")), "jpeg", new File(tempMain + "/" + id + "/" + id + ".jpeg"));
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "File download error.", "Connection error", JOptionPane.ERROR_MESSAGE);
                        enableAll();
                        deleteDir(temp);
                        return;
                    }
                    for (int j = 0; j < tempList.size(); j++) {
                        JSONObject imgJson = new JSONObject(String.valueOf(tempList.get(j)));
                        try {
                            ImageIO.write(Base64Conversion.base64ToImage(imgJson.getString("ci")), "jpeg", new File(kfPath + "/" + imgJson.getString("id") + ".jpeg"));
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(this, "File download error.", "Connection error", JOptionPane.ERROR_MESSAGE);
                            enableAll();
                            deleteDir(temp);
                            return;
                        }
                    }
                }

                //TODO: CALL OPENCV HERE
                File f = new File("/home/psyholog/cj.txt");
                if (f.exists()) {
                    System.out.print(f.delete());
                }

                try {
                    disableAll();

                    java = new ProcessBuilder("bash", "-c", "~/iwb/iwb").start();




                } catch (IOException ex) {
                    ex.printStackTrace();
                }

             

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Could not start recording.", "Error", JOptionPane.ERROR_MESSAGE);
                enableAll();
                deleteDir(temp);
            }
        }
    }//GEN-LAST:event_bPlayMouseClicked

    private void bStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bStopMouseClicked
        FileWriter fstream = null;
        try {
            enableAll();
            deleteDir(new File("temp"));
            //TODO: Transmit stop command to OPENCV
            fstream = new FileWriter("/home/psyholog/cj.txt");
            BufferedWriter out = new BufferedWriter(fstream);
            BufferedReader result = new BufferedReader(
                    new InputStreamReader(java.getInputStream()));
            String s;
            while ((s = result.readLine()) != null) {
                System.out.println(s);
            }
            BufferedReader errors = new BufferedReader(
                    new InputStreamReader(java.getErrorStream()));
            while ((s = errors.readLine()) != null) {
                System.err.println(s);
            }
            result.close();
            errors.close();
            out.close();

            /*      for(int i =0;i<10;i++){
            System.out.println(result.readLine());

            }*/

            java.destroy();
        } catch (IOException ex) {
            ex.printStackTrace();
            Logger.getLogger(TabView.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            alImages.clear();
            alKeyFrames.clear();
            alSessions.clear();
            getSessions(_userID, _tabtype);
            refreshImages();
            refreshKeyFrames();
            lislImages.setModel(new DefaultListModel());
            listKeyFrames.setModel(new DefaultListModel());
        } catch (Exception ex) {
        }

    }//GEN-LAST:event_bStopMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bComment;
    private javax.swing.JButton bDeleteFrame;
    private javax.swing.JButton bPlay;
    private javax.swing.JButton bStop;
    private org.jdesktop.swingx.JXImagePanel cImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList lislImages;
    private javax.swing.JList listKeyFrames;
    private javax.swing.JList listSessions;
    private javax.swing.JTextPane tpComment;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
